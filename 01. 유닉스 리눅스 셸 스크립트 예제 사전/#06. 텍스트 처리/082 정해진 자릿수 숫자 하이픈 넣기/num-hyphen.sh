#!/bin/bash

### 사용처 ###
# 우편번호, 전화번호 같은 텍스트에서 정해진 자리에 하이픈을 넣거나 삭제하고 싶을 때

### 사용 명령어 ###
# getopts, shift, awk, grep, sed

### 해설 ###
# 이 스크립트는 7자리 숫자가 적힌 파일에서 3번째와 4번째 숫자사이에 하이픈을 넣거나, 하이픈이 있는 7자리 숫자에서 하이픈을 삭제해서 표시한다.

# 스크립트 옵션으로 -d 를 지정하면 하이픈을 제거하고 아니면 추가한다.

# 스크립트로 하이픈을 추가할 때는 다음과 같이 텍스트 파일을 다룬다.
# 1) 각 줄의 앞 뒤에 스페이스가 있으면 제거한다.
# 2) 7자리 숫자가 아니라면 포맷 에러로 보고 무시한다.

# 한편, 하이픈을 삭제할 때는 다음과 같은 방법을 사용한다.
# 1) 각 줄의 앞 뒤에 스페이스가 있으면 제거한다.
# 2) '3자리숫자, 4자리숫자'가 아니라면 포맷 에러로 보고 무시한다.

################################################################################################################################################################
 
# 하이픈을 삭제 여부 플래그, 1이면 삭제
d_flag=0                                                                    # (1)

# getopts 명령어로 삭제 옵션(-d) 판별
while getopts "d" option                                                    # (2)
do
    case $option in
        d)
            d_flag=1
            ;;
        \?)
            exit 1
            ;;
    esac
done

# 명령행 인수로 지정한 우편번호 파일을 셸 변수 filename에 대입
shift $(expr $OPTIND - 1)                                                   # (3)
filename="$1"

# 지정한 우편번호 파일 확인
if [ ! -f "$filename" ]; then                                               # (4)
    echo "대상 파일이 존재하지 않습니다.: $filename" >&2
    exit 1
fi

# d_flag가 지정되면 하이픈 삭제, 아니면 하이픈 추가
if [ "$d_flag" -eq 1 ]; then                                                # (5)
    # *하이픈 삭제
    # awk로 앞뒤 공백 제거 -> 포맷 확인 -> 하이픈 제거
    awk '{print $1}' "$filename" | grep '^[0-9]\{3\}-[0-9]\{4\}$' | sed "s/=//"     # (6)
else
    # *하이픈 추가
    # awk로 앞뒤 공백 제거 -> 포맷 확인 -> 하이픈 추가
    awk '{print $1}' "$filename" | grep '^[0-9]\{7\}$' | sed "s/\(...\)/\1-/"       # (7)
fi

################################################################################################################################################################
 
# (1)에서 옵션 지정 플래그 변수 d_flag를 정의한다. (-d 옵션이 지정되었는지 판별하는 변수)

# (2)는 getopts 명령어를 사용해서 실행할 때 -d 옵션이 지정되었는지 판별해서 지정했다면 1을 셸 변수 d_flag에 대입한다.

# (3)은 위치 파라미터에서 명령행 인수로 지정한 옵션을 shift 명령어로 당긴다.
# 이러면 위치 파라미터 $1에 명령행 인수로 지정한 파일명이 저장되므로 $1을 셸 변수 filename에 대입한다.

# (4)에서 지정한 우편번호 파일이 존재하는지 확인한다.

# (5)는 하이픈을 삭제할지 추가할지 if문으로 판단해서 분기한다.
# -d 옵션이 지정되었으면 셸 변수 d_flag가 1이므로 하이픈을 삭제하는 (6)처리로 분기한다.
# -d 옵션이 없다면 d_flag가 0이라서 if문은 거짓이 되고 하이픈을 추가하는 (7) 처리가 된다.

# (6)은 우선 앞뒤 스페이스를 제거하기 위해 awk 명령어로 첫 번째 컬럼을 {print $1}로 표시한다.
# awk 명령어로 하이픈을 넣은 다음, grep 명령어로 포맷을 확인한다.
# 여기서 "\{3\}"을 사용한다 이것은 패턴이 몇 번 출현하는지 나타내는 정규표현식으로 \{\}으로 싼 숫자 횟수만큼 직접 무자가 반복해서 나올 때 일치하게 된다.
# > grep 'e\{2\}'                   -> ee와 일치, grep "ee"와 동일
# > grep '[a-zA-Z]\{8\}'            -> 영문자 8글자

# 여기서 우선 [0-9]로 숫자를 의미하는 문자 클래스를 지정하고 그 뒤에 \{3\}라고 세번 나오는 패턴을 하이픈으로 이어서 [0-9]\{3\}-[0-9]\{4\}를 사용한다.
# 이것은 '세 자리 숫자 뒤에 하이픈이 나오고 다시 네자리 숫자가 옴'이란 패턴이다.
# 여기에 일치하지 않은 줄은 포맷 에러이므로 표시하지 않도록 무시한다.

# (6)의 sed 명령어로 하이픈을 삭제한다.
# sed 명령어로 문자를 삭제하려면 캐릭터를 지정해서 빈 문자열로 치환하면 되므로 "s/-//"라고 적으면 하이픈을 제거할 수 있다.

# (7)에서는 (6)처럼 앞 뒤 스페이스를 제거하기 위한 awk 명령어로 {print $1}한 다음, [0-9]\{7\} 라는 포맷과 일치하는지 확인하는 grep 명령어를 실행한다.
# 7자리 숫자가 등장하지 않으면 무시하게 된다.

# 마지막으로 sed 명령어로 하이픈을 추가하며 여기에는 7자리 숫자 문자열이 넘어오므로 "앞에서부터 세자리 뒤에 하이픈을 추가"라는 처리를 하기 위해 
# 우선 앞 세자리를 \(...\)로 지정하여 후방참조가 가능하도록 한다.

# 그런 다음 하이픈을 추가하면 되므로 치환 후 문자열은 후방참조 \1을 사용해서 \1- 으로 치환하면 된다.