#!/bin/bash

### 사용처 ###
# CSV 파일에서 인수로 지정한 ID에 대응하는 특정 컬럼을 표시하고 싶을 때

### 사용 명령어 ###
# cut, read, echo

### 해설 ###
# 이 스크립트는 CSV 파일에서 지정한 ID에 대응하는 필드를 추출해서 표시한다.

# 대상 CSV 파일은 "ID번호, 이름, 점수" 형식이다.

# CSV 파일은 엑셀 등에서 자주 사용하는 파일인데 간편한 자료구조라서 유닉스에서도 간단히 리포트 처리 등에서 사용한다.

# 셸 스크립트로 CSV 파일을 다룰려면 awk 명령어를 사용하거나 IFS에 ,(쉼표)를 설정하는 등 몇가지 방법이 있지만 여기에서는 cut 명령어를 사용해 각 항목을 추출한다.

################################################################################################################################################################
 
# CSV 파일 지정
csvfile="data.csv"

# ID가 지정되지 않으면 종료
if [ -z "$1" ]; then                                                            # (1)
    echo "ID를 지정하세요." >&2
    exit 1
fi

# CSV 파일이 존재하지 않으면 종료
if [ ! -f "$csvfile" ]; then                                                    # (2)
    echo "CSV 파일이 존재하지 않습니다: $csvfile" >&2
    exit 1
fi

while read line                                                                 # (3)
do
    # cut으로 컬럼 추출
    id=$(echo $line | cut -f 1 -d ',')                                          # (4)
    name=$(echo $line | cut -f 2 -d ',')
    score=$(echo $line | cut -f 3 -d ',')

    # ID 컬럼이 인수로 지정한 ID와 일치하면 표시
    if [ "$1" = "$id" ]; then                                                   # (6)
        echo "$name"
    fi
done < $csvfile                                                                 # (5)

################################################################################################################################################################
 
# (1)에서 명령행 인수를 확인한다.
# 예제에서는 검색할 ID를 인수로 지정하므로, test 명령어 -z 연산자를 써서 인수를 확인하고 없으면 에러 표시하고 종료한다.

# (2)에서 CSV 파일이 존재를 확인한다.
# -f 옵션은 대상 파일이 일반 파일인지 확인하는 연산자이며, 여기에 부정 연산자 !를 써서 대상이 디렉토리이거나 파일이 존재하지 않으면 에러 표시하고 종료한다.

# (3)에서 셸 변수 line에 read 명령어를 사용해서 CSV 파일을 읽는다.
# 여기서 (5) 처럼 while 문에 입력 리다이렉트를 작성한다.
# 이로써 read 명령어로 CSV 파일에 셸 변수 line에 한 줄씩 순서대로 읽을 수 있다.

# (4)에서 CSV 파일 줄마다 각 항목을 추출한다.
# cut 명령어는 텍스트를 추출할 수 있는 명령어로 -f 옵션으로 추출할 필드 번호를 지정하고, -d 옵션으로 구분자를 지정한다.

# (6)에서 셸 스크립트 실행 시 지정한 ID와 현재 읽은 CSV 파일 ID가 일치하는 if문으로 판단한다.
# 만약 일치하면 해당 ID 줄이므로 앞서 대입한 셸 변수 name 값을 echo 명령어로 표시한다.
# while 문으로 반복해서 전체를 확인하면 CSV 파일에서 해당 ID의 이름을 추출할 수 있다.

################################################################################################################################################################
 
### << 주의 사항 >>

# 이 스크립트는 일치하는 줄을 그대로 표시하므로 같은 ID를 가진 레코드가 여러 개 있으면 그대로 여러 번 표시한다.

# 값 자체를 ,(쉼표)가 있는 CSV 파일은 이 스크립트에서 사용할 수 없다.

# data.csv 값에 여러 번 스페이스가 들어 있으면 하나로 합쳐서 표시한다. ("<space><space>Kim"은 "<space>Kim"이 된다.)
# 이런 동작이 곤란하다면 셸 구분자 IFS에서 스페이스를 제거하고 줄바꿈만 지정한다.

# 예제처럼 이름 컬럼만 표시하는 게 아니라 단순히 ID와 일치하는 줄 전체를 표시하고 싶을 때 awk 명령어를 사용하면 다음과 같다.
# awk -F, -v id="$1" '$1 == id {print}' data.csv