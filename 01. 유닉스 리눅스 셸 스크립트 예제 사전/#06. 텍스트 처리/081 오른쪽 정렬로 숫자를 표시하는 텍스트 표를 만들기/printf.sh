#!/bin/bash

### 사용처 ###
# 숫자를 카운트하는 명령어에서 세로 위치를 정이해서 리포트하고 싶을 때

### 사용 명령어 ###
# grep printf

### 해설 ###
# 이 스크립트는 현재 디렉토리의 로그 파일에서 셸 변수 search_text로 정의한 문자열을 검색해서 일치한 줄 수를 파일마다 표시한다.

# 예를 들어 어떤 애플리케이션 로그 파일 무리에서 로그 파일마다 에러가 발생한 줄을 세고 싶을 때 사용한다.

################################################################################################################################################################
 
# 검색할 문자열 정의
search_text="ERROR 19:"

# 현재 디렉토리에서 확장자가 .log인 파일을 순서대로 처리
for filename in *.log                                                   # (1)
do 
    # 일치하는 줄 수를 -c 옵션으로 취득
    count=$(grep -c "$search_text" "$filename")                         # (2)
    # printf 명령어로 오른쪽 정렬 6칸으로 변형해서 출력
    printf "%6s (%s)\n " "$count" "$filename"                           # (3)
done

################################################################################################################################################################

# 이 예제에서 일치한 줄 수를 출력할 때 printf 명령어로 포맷에 맞춘 리포트를 만드는 것이 포인트이다.

# 파일에서 패턴과 일치한 줄 수를 세서 표시하는 방법으로는 grep 명령어 -c 옵션을 사용하는 방법도 있다.

# > grep -c "ERROR 19:" *.log
# app20211010.log:1
# app20211011.log:12
# app20211012.log:73
# info.log:11
# system.log:5

# 하지만 이런 형태로는 깔끔하지 않으므로 리포트용으로 손보는 것이 좋다.

################################################################################################################################################################

# (1)에서는 for문 in에 *.log를 지정해서 현재 디렉토리에 있는 확장자 .log 파일을 순서대로 셸 변수 filename으로 처리한다.

# (2)는 일치한 줄 수만 표시하는 grep 명령어에 -c 옵션을 써서 검색 문자 출현 줄 수를 세고, 이 결과를 명령어 치환 $()을 사용해서 셸 변수 cound에 대입

# (3)은 결과를 정리해서 표시하는 처리이고, 여기서 서식을 써서 문자열로 출력하는 printf 명령어를 사용한다.
# printf 명령어는 서식 지정자라고 부르는 문자열을 지정해서 다양한 포맷을 지정할 수 있고, 그 뒤에 지정한 인수((3)의 $count, $filename)를 대입할 수도 있다.

# printf 명령어에서 자주 사용하는 서식 지정은 다음과 같다.
# "[%s]"    : 문자열을 그대로 출력
# "[%5s]"   : 오른쪽 정렬로 5칸짜리 문자열
# "[%-5s]"  : 왼쪽 정렬로 5칸짜리 문자열
# "[%-,2s]" : 왼쪽 정렬로 왼쪽에서 두 글자만
# "[%5d]"   : 오른쪽 정렬로 5칸짜리 정수
# "[%05d]"  : 오른쪽 정렬로 5칸짜리 정수(빈자리는 0을 채움)
# "[%-5d]"  : 왼쪽 정렬로 5칸짜리 정렬

