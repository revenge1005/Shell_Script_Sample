#!/bin/bash

### 사용처 ###
# CSV 파일에서 특정 컬럼값의 평균값을 계산해서 파일로 출력하고 싶을 때

### 사용 명령어 ###
# awk

### 해설 ###
# 이 스크립트는 명령행 인수로 지정한 CSV 파일의 세 번째 컬럼에서 값의 평균값을 계산해서 출력한다.

# 평균값은 원본 파일명에 확장자 .avg를 붙인 파일에 출력하며, 여러 CSV 파일마다 평균값을 출력하고 싶을 때 사용한다.

# 셸 스크립트에서 수치 계산은 expr 명령어를 자주 사용하지만, expr은 정수 계산만 가능하므로 소수가 포함된 계산에서는 사용할 수없다.
# 셸 스크립트에서 소수를 포함한 계산을 할 때는 bc 명령어를 사용하기도 하는데 여기서는 간단히 awk 명령어를 사용한다.

################################################################################################################################################################
 
# CSV 파일이 존재하지 않으면 종료
if [ ! -f "$1" ]; then                                                    # (1)
    echo "대상 CSV 파일이 존재하지 않습니다.: $1" >&2
    exit 1;
fi

# 확장자를 제외한 파일명 취득
filename=${1%.*}                                                          # (2)

awk -F, '{sum += $3} END{print sum / NR}' "$1" > ${filename}.avg          # (3)

################################################################################################################################################################

# (1)에서 대상 CSV 파일 존재를 확인한다.
# -f 옵션은 대상이 일반 파일인지 확인하는데, ! 연산자를 함께 써서 대상이 일반 파일이 아니라면 에러를 표시한다.

# (2)에서 파일 확장자를 제외한 파일명을 취득한다.
# 여기서 셸 파라미터 확장을 사용한 문자열 치환으로 셸 변수 $1에서 '.(점)과 그 이후에 이어진 임의 문자열'을 제거한다.

# (3)은 평균값을 계산하는 awk 명령어이다.
# 우선 awk 명령어에서 구분자 ,(쉼표)를 지정하기 위해 -F 구분자 지정 옵션에 ,를 설정한다.
# awk 명령어 표현은 {}는 각 줄마다 실행하고 END{}는 마지막 줄을 읽은 다음 실행하게 된다.
# 우선 {sum += $3}으로 각 줄의 $3(세 번째 컬럼)을 변수 sum과 더한다.

# END에서 사용한 NR은 awk 내장 변수로 현재 처리한 줄 번호가 들어 있다.
# 즉, END{print sum / NR}이 실행되는 것은 마지막 줄이므로 NR에는 파일 줄수가 들어간다.
# NR 값은 sum을 나누면 점수 편귱값을 구할 수 있다.
# 점수 평균값은 확장자를 제외한 파일명에 확장자 .avg를 붙인 파일에 리다이렉트해서 출력한다.

################################################################################################################################################################

### << 주의 사항 >>

# awk에서 구분자를 쉼표로 설정할 때, -F, 가 아니라 -F ',' 라고 지정해도 된다.

# 이 스크립트는 값자체에 쉼표가 포함된 CSV 파일에 대응하지 않는다.

# 예제에서는 CSV 파일 내용을확인하지 ㅇ낳으므로 만약 빈 파일을 0으로 나누게 되어서 에러가 발생한다.
