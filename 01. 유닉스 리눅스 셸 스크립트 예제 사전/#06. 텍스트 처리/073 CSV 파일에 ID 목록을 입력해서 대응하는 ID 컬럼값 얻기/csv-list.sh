#!/bin/bash

### 사용처 ###
# ID 목록 파일과 CSV 파일에서 지정한 ID의 컬럼값을 표시하고 싶을 때

### 사용 명령어 ###
# read, grep

### 해설 ###
# 이 스크립트는 ID 목록 파일을 명령행 인수로 지정해서 CSV 파일에서 일치하는 ID 컬럼값을 취득한다.

# 대상 CSV 파일은 다음처럼 "ID번호, 이름, 점수" 형식이라고 가정한다.
# 0001,Kim,45
# 0002,Lee,312
# 0003,Park,102
# 0004,Kang,2
# 0005,Seo,92

################################################################################################################################################################
 
filechek()
{
    if [ ! -f "$1" ]; then                                                  # (2)
        echo "ERROR: File $1 does not exist." >&2
        exit 1;
    fi
}

# CSV 파일명과 ID 목록 파일명을 지정해서 파일 존재 확인
csvfile="data.csv"                                                          # (1)
idlistfile="$1"

filechek "$idlistfile"

while IFS=, read id name score                                              # (3)
do
    grep -xq "$id" "$idlistfile"                                            # (4)
    if [ $? -eq 0 ]; then                                                   # (5)
        echo $name
    fi
done < "$csvfile"

################################################################################################################################################################

# (1)에서 셸 변수 csvfile에 CSV 파일명을 설정하고, 셸 변수 idlistfile에 ID 목록 파일명을 설정해서 파일 존재를 확인한다.

# (3)에서 CSV 파일에서 셸 변수 id, name, score에 대응하는 값을 읽는다.
# 예제에서는 일시적으로 설정하는 환경 변수 IFS를 사용한다.
# $ TMPDIR=/mytmp ./start.sh
# 환경 변수 TMPDIR을 임시로 설정해서 start.sh를 실행한다.
# 이 줄 다음부터 환경 변수 TMPDIR에 설정한 값은 원래 설정한 값이 되엇 /mytmp가 아니게 된다.
# 즉, "환경변수=값 명령어""는 어떤 특정 명령어나 스크립트를 실행할 때만 일시적으로 환경 변수를 설정하게 된다.
# IFS=, read id name score
# 즉, 임시로 환경 변수 IFS를 ,(쉼표)로 설정해 read 명령어를 실행한다.

# (3)에서 지정한 while 문을 정리하면 셸 변수 csvfile로 지정한 CSV 파일에서 한 줄씩 읽어서 read 명령어를 사용해 셸 변수에 값을 대입한다.
# 이때 값의 구분자는 환경변수 IFS에 ,(쉼표)를 설정해서 쉼표로 구분한다.
# 이렇게 하면 쉼표로 줄을 분할해서 각각의 컬럼값이 셸 변수 id, name, score에 대입한다.

# (4)에서 ID 목록 파일의 ID와 CSV 파일의 ID가 일치하는지 확인하기 위해 grep 명령어의 -x, -q 옵션을 사용한다.
# -x 옵션은 한 줄 전체가 패턴과 완전 일치할 때만 선택하는 옵션으로, grep으로 "0001"이라는 ID를 검색하면 
# "00010"이라는 ID도 찾아서 파일에서 ID를 검색할 때 잘못된 결과를 출력할지도 모른다.
# CSV 파일에서 추출한 ID가 ID 목록 파일과 완전 일치하는지 확인하기 위해 -x 옵션을 사용하는 것이다.
# -q 옵션을 통해 grep 명령어 검색 결과를 출력하지 않는다.

# (5)에서 grep 명령어 종료 스테이터스를 판단해서 일치 여부를 확인한다.

################################################################################################################################################################

### << 주의 사항 >>

# 값 자체에 쉼표가 포함된 파일은 이 스크립트에서 다룰 수 없다.

# 예제처럼 이름만 추출해서 표시하는 게 아니라 단순히 ID와 일치하는 줄 전체를 표시하고 싶을 때 grep 명령어의 -f 옵션을 사용한다.
# $ grep -f id.lst data.csv
# 0003, Park, 102
# 0004, Kang, 3
# 하지만, 이 예제에서는 id.lst 파일에서 [0001]이 있으면 [00010]이라는 ID와 일치하게 된다.
# 또한, 만약 이름이 [0001 Song]인 경우에도 일치하게 되며, 이럴 때 ID 목록 파일 첫 글자에 ^를 붙이고 
# ID 끝에 ,(쉼표)를 붙인 [^0001,]라고 적으면 이런 문제를 피할 수 있다.