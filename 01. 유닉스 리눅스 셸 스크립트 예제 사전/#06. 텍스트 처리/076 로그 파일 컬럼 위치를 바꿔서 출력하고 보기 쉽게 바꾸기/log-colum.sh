#!/bin/bash

### 사용처 ###
# 아파치 접속 로그에서 필요한 컬럼을 추출하고, 순서를 바꾸고 싶을 때

### 사용 명령어 ###
# awk

### 해설 ###
# 이 스크립트는 아파치 접속 로그에서 필요한 열을 추출해서 순서를 바꿔 출력한다.

# 로그 해석은 같은 조건으로 대량의 파일에서 추출할 때가 많으므로 이런 스크립트로 일괄 처리할 수 있다.

################################################################################################################################################################

# 로그 파일이 존재하지 않으면 종료
if [ ! -f "$1" ]; then                                              # (1)
    echo "대상 로그 파일이 존재하지 않습니다." >&2
    exit 1;
fi

# 리퀘스트 시각과 원격 호스트를 외부 파일에 출력
awk '{print $4,$5,$1}' "$1" > "${1}.lst"                            # (2)

################################################################################################################################################################

# 예제어서 다루는 로그 형식과 실제 환경에서 작성된 로그는 조금씩 다룰 수 있으며, 로그의 항목별 의미는 다음과 같다.
# 192.168.219.1 - - [19/Nov/2021:07:13:16 +0000] "GET / HTTP/1.1" 200 3477 

### 원결 호스트              
# >> 192.168.219.1

### identd의 원격 사용자명   
# >> -
# "identd 원격 사용자명"은 mod_ident라는 아파치 모듈에서 제공하며, 아파치에서 identd로 사용자명을 취득하는 경우는 거의 없으므로 대부분 "-"로 출력된다.

### 인증의 원격 사용자명
# >> -
# "인증 원격 사용자명"은 BASIC 인증 등에서 입력된 사용자명으로, 인증이 없는 페이지는 단순히 "-"로 출력된다.

### 리퀘스트 받은 시각
# >> [19/Nov/2021:07:13:16 +0000]

### 리퀘스트 첫 줄
# >> "GET / HTTP/1.1"
# 리퀘스트 첫 줄은 "HTTP 메서드명 리퀘스트 / 리퀘스트 URI(파일명) / HTTP 버전"이 된다.

### HTTP 스테이터스
# >> 200
# 

### 레스폰스 바이트 수
# >> 3477

################################################################################################################################################################

# (1)에서 명령행 인수를 확인하고 파일 존재 여부를 알아본다.
# -f 는 일반 파일인지 확인하는 연산자로 부정 연산자(!)와 함께 써서, 일반 파일이 아닐 때 에러를 출력하고 종료한다.

# (2)는 로그 파일에서 awk 명령어로 필요한 열을 추출한다.
# awk 명령어는 액션이라 부르는 중괄호({})로 둘러싼 부분에서 다양한 출력이 가능하다.
# "$4,$5,$1" 이란 awk 명령어 내부 변수로 각각 네 번째, 다섯 번째, 첫 번째 컬럼을 의미한다.

# awk 명려어에서 공백문자는 기본 구분자이므로 로그 예에서 나오는 리퀘스트 시각 [19/Nov/2021:07:13:16 +0000]은 
# 시차를 표시하는 "+0000" 앞에 스페이스가 있어 awk 에서 다른 커럼으로 인식해 버린다.

# 따라서 네 번째와 다섯 번째 컬럼 "$4,$5"를 나란히 print 하는 것이고, 그리고 awk 명령어에서 print 할 때는 쉼표가 스페이스가 된다.
# 이때 스페이스 기호로 print할 변수를 나열하면 스페이스를 무시하기 때문에 주의해야 한다.
# > awk '{print $4 $5 $1}' access_log
# [19/Nov/2021:07:13:16+0000]192.168.219.1

# (2)에서 사용한s $1 기호는 awk 변수와 셸 스크립트 위치 파라미터 변수 두 개가 등장한다.
# 서로 완전히 다르므로 주의하기 바라며, awk의 print 문 암에 있는 $1은 awk 내방 변수로 '첫 번째 컬럼값'을 의미한다.
# 셸 스크립트의 $1은 '첫 번째 명령행 인수'가 되며, 상황에 따라서는 파일명을 다룬 변수에 대입해서 작성하는 것이 좋을 때도 있다.
# logfile="$1"
# awk '{print $4,$5,$1}' "$logfile" > "${logfile}.lst"

