#/bin/bash

### 사용처 ###
# cron 등에서 스크립트를 전체 경로로 실행할 때 상대 경로로 실행한 것과 같은 동작을 하고 싶을 때

### 사용 명령어 ###
# cd, dirname

### 해설 ###
# 이 스크립트는 두 외부 파일 start.sh과 end.sh를 순서대로 실행한다.
# 여기서 start.sh와 end.sh은 /home/user1/myapp 디렉토리에 설치되어 있고 각 파일의 내용은 "START", "END"이다.

# 거런데 셸 스크립트는 내부에서 다른 셸 스크립트를 실행할 때는 경로를 주의해야 한다.
# 스크립트를 작성할 때는 셸 스크립트 파일이 저장된 디렉토리를 현재 디렉토리로 작업하는 일이 많으므로, 스크립트는 정상적으로 동작한다.

# 하지만 스크립트를 완성해서 cron에 등록해 정기적으로 실행한다면 에러가 발생할 지도 모른다.
# 직접 실행할 땐 정상이었지만, cron에 등록해서 배치 처리할 때 제대로 동작하지 않는 상황이 심심치 않게 벌어진다.

# "이것은 crom 실행 시 현재 디렉토리가 cron 실행 사용자의 홈 디렉토리가 되기 때문이다."
# 즉, cron에 dirname.sh가 실행되면 현재 디렉토리는 /home/user1이 되어 여기서 ./start.sh를 지정하면 /home/user1/start.sh 파일을 찾게 된다.

# 때문에 1) 스크립트 내부에서 다른 셸 스크립트를 실행하는 프로그램은 외부 스크립트 파일을 전체 경로로 지정하는 방법도 사용한다.
# /home/user1/myapp/start.sh
# /home/user1/myapp/end.sh
# 하지만 이때 스크립트가 있는 디렉토리(myapp) 이름이 바뀌면 문제가 생기며 이식성도 낮아진다.
# 따라서 상대 경로를 사용하고 싶기 마련이다 이런 문제를 해결하려면 셸 스크립트가 일단 자신이 저장된 디렉토리에 cd 명령어로 이동해서 처리를 시작하도록 만들면 된다.

################################################################################################################################################################
 
cd "$(dirname "$0")"
# cd "${0%/*}"

./start.sh
./end.sh

################################################################################################################################################################
# dirname 명령어는 전체 경로가 오면 디렉토리 부분을 추출할 수 있다.
# $0은 실행된 셸의 명령어 자체를 뜻하는 변수로, 예제에서는 /home/user1/myapp/dirname.sh 가 들어간다.

# 한편, $() 은 명령어 치환 표기로 명령어 출력을 그대로 스크립트에 이용할 수 있다.
# 즉, 'dirname "$0" 출력 결과 디렉토리에 cd 명령어로 이동한다.'라는 의미이다.

# 이렇게 하면 셸 스크립트는 자신이 존재하는 디렉토리로 cd 명령어를 써서 이동할 수 있다.
# 따라서 상대경로, 절대경로 상관없이 외부 셸 스크립트를 상대 경로로 실행할 수 있다.

################################################################################################################################################################

# 디렉토리명에 스페이스(공백문자)가 포함되더라도 정상적으로 동작하도록 예제에서는 $0 및 명령어 치환 전체를 큰 따옴표 기호로 감싼다.

# dirname 명령을 쓰지 않아도 다음처럼 작성할 수 있다.
# cd "${0%/*}"

# 이것은 셸 파라미터 확장을 이용한 예이다.
# ${parameter%word} 라고 하면 parameter 값에서 word에 후방 일치하는 부분을 삭제한 갓을 취즉할 수 있다.
# 즉, word로 /* 가 지정되었으므로 '변수 $0 뒤에 /임의의 문자열'을 삭제한 값, 즉 디렉토리 부분만 얻을 수 있다.