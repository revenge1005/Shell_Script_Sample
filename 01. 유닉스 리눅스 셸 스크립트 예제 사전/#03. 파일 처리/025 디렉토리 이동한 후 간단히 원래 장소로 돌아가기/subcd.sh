#/bin/bash

### 사용처 ###
# 스크립트 안에서 cd 명령어로 다른 디렉토리로 이동하고 나서 원래 디렉토리로 간단히 돌아가고 싶을 떄

### 사용 명령어 ###
# cd, echo, tar

### 해설 ###
# 이 스크립트는 /var/tmp로 현재 디렉토리를 이동해서 그 안에 있는 txt 파일을 archive.tar로 
# 압축한 다음, 원래 디렉토리로 돌아와 command.sh을 실핸다.

################################################################################################################################################################
 
 # 괄호 안은 서브셸이 되므로 디렉토리 이동은 이 안에서만 유효
 (                                                  ##  ┐
        echo "Archive: /var/tmp/archive.tar"        ##  │
        cd /var/tmp                                 ## (1)
        tar cvf archive.tar *.txt                   ##  │
 )                                                  ##  ┘

# 스크립트 실행은 현재 디렉토리에서 처리
 echo "Start: Command.sh"
 ./command.sh
 
################################################################################################################################################################
 
# (1)은 서브셸 표기로 괄호로 둘러싼 부분이 서브셸로 실행된다.
# 서브셸은 현재 셸 안에서 새롭계 실행되는 셸을 말하며, 서브셸을 부른 곳의 환경 설정은 서브셸에 이어지지만, 서브셸 내부에서 일어나는 변경은
# 호출한 원래 셸에는 영향을 주지 않는다.

# 따라서 서브셸에서 현재 디렉토리를 변경하거나 변숫값을 변경해도 원래 셸의 현재 디렉토리나 변수값은 변하지 않는다.
# 이런 관계를 "부모와 자식"이라고 부르며, 즉 서브셸은 자식 프로세스가 되고, 호출한 곳은 부모 프로세스가 된다.

# 이 예제에서는 서브셸의 "호출한 곳의 환경이 변하지 않는 성질"을 이용한다.
# 서브셸 안에서는 cd 명령어로 현재 스크립트가 설치된 디렉토리에서 /var/tmp로 디렉토리 이동을 하더라도 서브셸에서 빠져나오면 
# 원래 현재 디렉토리로 돌아온다 따라서 cd 명령어로 원래 디렉토리로 돌아가는 걸 잊었을 때 종종 발생하는 단순한 버그를 방지할 수 있다.