#/bin/bash

### 사용처 ###
# 시간 문자열 들을 비교해서 며칠 차인지 계산하고 싶을 때

### 사용 명령어 ###
# date, expr

### 해설 ###
# 이 스크립트는 문자열로 된 두 날짜의 차를 유닉스 시간으로 변환 후 며칠 차이가 나는지 계산해서 셸 변수 day_interval에 대입한다.

# 예를 들어 신청일로부터 5일 이상 지난 사용자를 대상으로 어떤 메일을 보내는 때 'day_interval'이 5이상이라면 메일을 보내도록 스크립트 같은 조건이 있을 수 있다.

################################################################################################################################################################

day1="2021/04/01 10:49:41"                          # ┐ 
day2="2021/03/30 08:31:52"                          # ┘ (1)

# 날짜에서 epoch 초를 얻으려먼 +%s 사용 (리눅스)
# -d 옵션은 FreeBSD/MAC에서 사용 불가
day1_epoch=$(date -d "$day1" +'%s')                 # ┐ 
day2_epoch=$(date -d "$day2" +'%s')                 # ┘ (2)

echo "day1($day1): $day1_epoch"                     # ┐
echo "day2($day2): $day2_epoch"                     # ┘ (3)

# 두 날짜의 epoch 초끼리 뺀 값을
# 하루 = 24시간 = 1440분 = 86400초로 나누면 날짜 계산 가능
echo "day interval: "                               # ┐
expr \( $day1_epoch - $day2_epoch \) / 86400        # │ (4)
echo $day_interval                                  # ┘

################################################################################################################################################################

# 유닉스 서버를 운용하다보면 다음과 같은 현재 날짜를 처리하는 일이 자주 있다.
# 1) 로그 파일에서 오래된 파일 판정
# 2) 월별 처리 날짜 판정
# 3) 접수일시/해제일시 등록 등
# 4) 파일 타임스탬프 판단

# 이럴 때 유닉스는 일반적으로 '유닉스 시간'이라는 값으로 날짜를 처리한다.
# 이것은 UNIX 에포크(epoch)라고 부르는 1970년 1월 1일 0시 0분 0초부터 경고한 초를 나타내는 값으로 에포크 초라고도 부른다.

################################################################################################################################################################

# (1)에서 비교할 두 날짜를 변수에 대입하고 (2)에서 date 명령어를 출력 형식을 '+%s'로 지정해서 해당 날짜의 유닉스 시간을 산출한다.
# 이때 -d 옵션을 사용하는데 리눅스에서만 사용할 수 있다.

# (3)에서 문자열 표기 날짜와 유닉스 시간 표기를 echo 명령어로 출력한다.
# 유닉스 시간은 펄이나 루비 같은 스크립트 언어에서도 자주 사용하므로 이런 외부 스크립트와 연계할 때는 유닉스 시간을 사용하면 좋다.

# (4)에서 day1와 day2의 날짜 차이를 계산한다.
# 유닉스 시간은 단순히 초를 정수값으로 나타낸 것으므로 expr 명령어로 뺄샘만 하면 시간 차이를 계산할 수 있다.

