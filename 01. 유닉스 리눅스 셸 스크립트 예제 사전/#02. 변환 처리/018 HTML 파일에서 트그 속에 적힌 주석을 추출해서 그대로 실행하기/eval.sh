#!/bin/bash

### 사용처 ###
# 파일에 적힌 문자열을 추출해서 명령어로 실행하고 싶을 때

### 사용 명령어 ###
# eval, sed

### 해설 ###
# 이 스크립트는 공백문자를 포함한 문자열을 if문으로 비교해서 값이 "invalid value" 라는 문자열일 때 에러를 출력
# 공백을 포함한 문자열 취급이 핵심이다.
# 셸 스크립트에서 변수 구분자는 셸 변수 IFS로 정의하는데 기본값은 공백 기호, 탭, 줄바꿈이 지정되어 있다.
# 즉, 공백문자는 변수의 구분자를 뜻하는 특별한 의미가 있다.
# 그러므로 공백문자가 포함된 문자열이 저장된 변수를 따옴표 처리하지 않으면 쪼개진 것처럼 인식하여 생각과 다른 동작을 할 수도 있다.


filename="myapp.log"

eval $(sed -n "s/<code>\(.*\)<\/code>/\1/p" command.htm)


# 스크립트에서는 <code> 태그 부분을 패턴 매치해서 추출하는 방법으로 sed 명령어를 사용했다.

# sed 명령어의 -n 옵션은 처리 후에 패턴 스페이스 내용을 출력하지 않도록 하는 옵션이다.

# 그대로는 아무것도 출력되지 않아서 의미가 없으므로 마지막 p 플래그를 분여서 일치했을 때만 패턴 스페이스를 출력하도록 지정한다.


# <code> 태그 부분만 추출하고 싶으므로 후방참조 \1을 사용한다. 
# sed 명령어의 일치 확인에서 ()로 둘러싼 부분은 앞에서부터 순서대로 \1, \2 ... 로 참조할 수 있다.
# 여기에서 <code> 안에 임의의 문자열 .*를 ()로 둘러싸서 \1로 추출하며, \1 부분이 실행하고 싶은 명령어 문자열이 된다.

# 추출한 문자열을 eval 명령어를 통해 문자열의 명령을 실행시킨다.

# eval 명령어는 사용법에 따라서 메타 프로그래밍처럼 쓸 수도 있어 편리하지만, 텍스트 문자열을 그냥 명령어로 실행하므로 사용법에 따라서는 악의적인 코드가 실행될 수도 있어 위험하다.


#### 주의 사항 ####

# 예제에서 sed로 <code> 태그를 처리하므로, 다음과 같이 태그 안에 줄바꿈이 있으면 제대로 동작하지 않함
# <code>
#  date; ls -l $filename
# </code>

# eval 명령어는 인수 문자열을 명령어로 해석해서 그대로 실행해버리므로 입력값에 주의해야한다.
# 예를 들어 다음과 같은 문자열이 <code> 태그 안에 있다고 가정해보자.
# rm -rf ~/*
# 스크립트를 실행하면 ~가 홈디렉토리로 확정되어 실행한 사람의 홈디렉토리 내부를 전부 삭제해버린다.
# eval로 실행하는 스크립트를 만들 때에는 우선 eval 부분을 echo로 바꿔서 실행할 때 어떤 명령어 내용이 나오는지 확인한다.
