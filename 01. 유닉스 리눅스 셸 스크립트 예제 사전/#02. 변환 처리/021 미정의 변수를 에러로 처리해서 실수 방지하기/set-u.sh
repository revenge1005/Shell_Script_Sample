#!/bin/bash

### 사용처 ###
# 스크립트에서 정의 안 된 변수를 사용하면 에러 종료하고 싶을 때

### 사용 명령어 ###
# set

### 해설 ###
# 이 스크립트는 변수명을 잘못 지정해서 미정의 변수를 쓰게 될 때 에러를 표시하는 예제.
# 실행하면 "unbound variable"이라는 에러가 표시됨


set -u                                                   ## -----------------(1)----------------- ##

COPY_DIR=/myapp/work

# COPY_DIR이 아니라 COP_DIR이라고 실수했다 가정.
cp myapp.log $COP_DIR


#######################################################################################################

# ① 보통 shell 스크립트에서는 선언되지 않은 변수를 사용해도 에러가 발생하지 않는다.
# ㆍ 변수 대입은 변수 자체를 선언하지 않아도 가능하고 미정의 변수를 참조하면 빈 문자열이 된다.
# ㆍ 따라서 일일이 변수 선언을 하지 않아도 간단하게 프로그래밍이 가능하다는 점이 Shell 스크립트의 장점이다.
# ㆍ 하지만 변수 선언이 필요 없다는 shell 스크립트의 특징은 생각치 못한 버그를 만들 위험이 있다.

# dirname=/myapp/work/tmpdir
# rm -rf $dirname/

# 위 예제에서 변수 dirname으로 지정한 디렉토리를 삭제하는 예제이다. 만약 $dirname 부분을 실수해서 
# ㆍ $dirnam 같이 작성해 변수 dirnam은 정의되지 않았으므로 빈 문자열이 되어 다음과 같이 실행된다.
# rm -rf /
# ㆍ 위 명령은 루트 디렉토리를 지우려는 시도이므로 시스템 전체가 파손되는 중대 문제가 발생할 수도 있다.
# ㆍ 이렇듯 변수명을 잘못 기입해서 해당 위치가 빈 문자열이 되어서 그 결과 생삭하지 못한 파일을 삭제하는 일은 종종 있는 버그로 치명적인 결과로 이어지기도 한다.


#######################################################################################################

# ② 이런 일을 방지하기 위해 "set 명령어의 -u 옵션"을 사용한다.
# ㆍ "set -u"를 지정하면 스크립트 내부에서 미정의 변수를 참조하려고 할 때 에러가 발생해서 스크립트 실행 중단
# ㆍ 미정의 변수를 사용하는 명령어를 실행을 막게 된다.


#######################################################################################################

# ③ set -u 부작용
# ㆍ "set -u" 부작용은 명령행 인수 $1 같은 걸 다루기 힘들어진다는 것이다.

# set -u
# echo "1st arg: $1"
# echo "2st arg: $2"

# 만약 "set -u"옵션을 사용하지 않으면 지정되지 않은 명령해 인수는 참조 시 빈 문다열이 되므로 실행 결과는 아래와 같이 나온다.
# root@ubuntu:~# ./arg-set.sh 1
# 1st arg: 1
# 2st arg: 

# ㆍ 그러나 "set -u"가 있으므로 명령행 인수가 하나뿐이면 $2가 미정의 변수가 되어 다음과 같은 에러가 발생한다.
# ㆍ 이를 방지하려면 스크립트 내부에서 명령행 인수가 몇 개인지 계산해서 처리해야 한다.
# root@ubuntu:~# ./arg-set.sh 1
# 1st arg: 1
# ./arg-set.sh: line 6: $2: unbound variable

# ㆍ shell 스크립트에서 명령행 인수를 자주 다루므로 편리성을 위해 자주 "set -u"를 생략하며, 뭐든지 "set -u" 처리한다고 좋은 것만은 아니므로 주의해야 한다.