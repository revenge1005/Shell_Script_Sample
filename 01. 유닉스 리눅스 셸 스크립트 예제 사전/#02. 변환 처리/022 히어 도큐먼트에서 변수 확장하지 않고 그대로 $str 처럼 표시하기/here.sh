#!/bin/bash

### 사용처 ###
# 하이 도큐먼트 본체에 `(그레이브)를 $나 사용하는데 확장하지 않고 그대로 출력하고 싶을 때

### 사용 명령어 ###
# cat

### 해설 ###
# 이 스크립트는 "히어 도큐먼트"를 사용할 때 파라미터 확장이나 명령어 치환을 하지 않습니다.

# 이 변수는 확장되지 않으므로 실제로는 사용되지 않음
str="Dummy"

## --------------(1)-------------- ## 
cat << 'EOT'                                        
여기는 히어 도큐먼트 본체입니다.
이 부분에 적힌 문자열은 명령어 표준 출력에
직접 리다이렉트 됩니다.

종료 문자열을 작은따옴표 기호로 감싸면
$str이라고 적어도 변수 확장되지 않으며
`echo abc`도 명령어 치환되지 않습니다.
EOT


#######################################################################################################

# "히어 도큐먼트"란 shell 스크립트 본체에 포함된 텍스트를 스크립트 내부 명령어 표준 입력으로 사용하는 기능
# "히어 도큐먼트"를 사용하는 방법은 다음과 같다.

# (명령어) << (종료 문자열)
# 히어 도큐먼트 본체
# . . .
# 종료 문자열

# 종료 문자열은 히어 도큐먼트 본체에 나오지 않는 문자열이면 뭐든지 상관 없으며, 관용적으로 "END, EOT, EOF"가 
# 자주 사용되는데 실수로 히어 도큐먼트 본체에 이런 문자열이 나오면 에러가 일어나므로 _EOT_ 같은 기호를 붙이거나 
#  EndOfMultiline Text 같이 긴 종료 문자열을 지정하는 사람도 있다.


#######################################################################################################

# 한편, 파라미터 확장이나 명령어 치환을 하지 않고 적힌 내용 그대로 출력하고 싶다면 예제 처럼 작성한다.

# 히어 도큐먼트 종료 문자열을 (1) 처럼 작은따옴표로 감싸 'EOT'라고 작성하면 히어 도큐먼트 본체의 파라미터 
# 확장이나 명령어 치환을 막아서 $ 기호나 ` 기호를 포함한 텍스트를 그대로 취급할 수 있다.


#######################################################################################################

# ① 파라미터 확장 제어
# 히어 도큐먼트 안에 파라미터를 확장하고 싶은 변수와 그렇지 않은 변수가 섞여 있을 수도 있다.

# string="Hello"
# cat << EOT
# 이 변수는 확장됩니다. $string
# 이 변수는 확장되지 않습니다. \$string
# EOT

# ▼ ▼ ▼ 결과 ▼ ▼ ▼
# 이 변수는 확장됩니다. Hello
# 이 변수는 확장되지 않습니다. \$string


#######################################################################################################

# ② 히어 스트링
# bash에는 히어 도큐먼트 (<<)와 닮은 히어 스트링(<<<)이 있다.
# 더 간결하게 포함된 텍스트를 shell 스크립트에 작성할 수 있다.

# string="Hello"
# cat <<< "인사 예제:
# 안녕하세요.
# $string.
# 니하오."

# 히어 도큐도먼트에서는 EOT 같은 종료 문자열을 사용했지만, 히어 스트링은 단순히 큰 따옴표로 포함하고 싶은 
# 문자열을 둘러싸면 되므로 더 직관적으로 알기 쉽다.

# ▼ ▼ ▼ 결과 ▼ ▼ ▼
# 인사 예제:
# 안녕하세요.
# Hello.
# 니하오.

# 한편, 포함된 문자열 안에 $기호를 확장하고 싶지 않다면 히어 도큐먼트와 마찬가지로 큰따옴표가 아닌 작은따옴표를 쓰면 된다.
