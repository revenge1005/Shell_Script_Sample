#/bin/bash

### 사용처 ###
# IP 주소가 적힌 파일을 읽어서 호스트명을 함께 표시하고 싶을 때

### 사용 명령어 ###
# host, awk, sed

### 해설 ###
# 이 스크립트는 IP 주소가 적힌 파일(ip.txt)을 읽어서 각각의 IP 주소를 host 명령어로 호스트명으로 
# 변환해서 IP 주소, 호스트명 조합의 CSV 파일로 출력한다.

# 아파치를 비롯한 서버 소프트웨어 로그 파일에는 접속한 IP 주소가 기록된다.
# 이런 로그를 분석할 때 IP 주소를 호스트명으로 바꾸명 상대방의 ISP나 회선을 알기 쉬우므로 이련 변환을 자주하게 된다.

################################################################################################################################################################

while read ipaddr                                                           # (1)
do
    # host 명령어로 IP 주소 변환
    revlookup=$(host "$ipaddr")                                             # (2)

    # host 명령어가 성공했는지
    if [ $? -eq 0 ]; then                                                   # (3)
        echo -n "$ipaddr, "                                                 # (4)

        # host 명령어 출력을 awk 호스명만 표시
        echo "$revlookup" | awk '{print $NF}' | sed 's/\.$//'               # (5)
    else
        echo "$ipaddr"
    fi
        # DNS 서버 부하 경감을 위해 1초간 대기
        sleep 1                                                             # (6)
done < $1

################################################################################################################################################################

# (1)에서 while문으로 read 명령어를 실행해서 파일에서 IP 주소를 읽어 셸 변수 ipaddr에 저장한다.
# 한편 while문 마지막 줄(done) 뒤에서 명령행 인수 $1을 입력 리다이렉트한다.
# 따라서 read 명령어를 사용해서 파일 내용을 한 줄씩 셸 변수 ipaddr로 익어들이게 된다.

# (2)에서 IP 주소에서 호스트명을 변환하기 위해 host 명령어를 실행해서 그 결과를 명령어 치환$()으로 셸 변수 revlookup에 대입한다.

# (3)에서 host 명령어 종료 스테이터스를 특별 변수 $?로 판별한다.
# host 명령어가 성공적으로 변환했으면 종료 스테이터스인 $?는 0(정상 종료)이 된다.

# (5)에서는 호스트명을 표시한다.
# 변환된 호스트명은 host 명령어 표시 결과 마지막에 있으므로 awk 명령어를 사용해서 마지막 컬럼 $NF를 출력한다.
# (NF란 awk 명령에서 마지막 컬럼을 의미하는 변수)

# (5)에서 awk 명령어를 파이프로 이어서 sed 명령어에 넘겨 sed 명령어로 줄 끝에 있는 .을 삭제한다.
# 줄 끝에 있는 점을 \.$ 라는 패텀으로 일치시켜 이걸 빈 문자열로 치환하면 삭제할 수 있다.

# (6)에서 1초간 기다립니다. 
# DNS 서버에 부하가 걸리지 않도록 하는 처리입니다. 
# host 명령어는 외부 DNS 서버에 문의하는 명령어이므로 이 예제처럼 IP주소를 파일에서 읽어서 
# 순서대로 처리할 때 파일 크기가 크면 대량의 DNS 문의가 발생하게 됩니다. 
# 이런 행동은 서버에 부하가 걸리므로 여기에서는 1초씩 기다려서 DNS 서버 부하를 제어합니다.
